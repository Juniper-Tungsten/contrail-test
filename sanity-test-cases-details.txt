
List of Sanity Test Cases:
==========================

1 - TEST    :  test_dsnat_basic
-----------------------------------------------------------------------

            create a VN and enable fabric SNAT
            launch two VMs in that VN
            verify ping between the VN and ping to the external IP
            disable fabric SNAT
            verify that the ping the external IP fails

2 - TEST    :  test_dsnat_bug_1749695
-----------------------------------------------------------------------

           Testcase to verify the bug 1749695
           create test VN , associate a policy to allow all traffic between VN and ip fabric
           associate the policy to the test VN and fabric VN
           set the test VN fabric mode as l3
           verify the ping succeeds for intra VN and to the fabric IP

3 - TEST    :  test_generic_link_local_service
-----------------------------------------------------------------------

        Description: Test to validate generic linklocal service - running nova list from vm.
            1.Create generic link local service to be able to wget to jenkins
            2.Create a vm
            3.Try wget to jenkins - passes if successful else fails

        Maintainer: sandipd@juniper.net

4 - TEST    :  test_metadata_service
-----------------------------------------------------------------------

        Description: Test to validate metadata service on VM creation.

               1.Verify from global-vrouter-config if metadata configures or not - fails otherwise
               2.Create a shell script which writes  'hello world ' in a file in /tmp and save the script on the nova api node
               3.Create a vm with userdata pointing to that script - script should get executed during vm boot up
               4.Go to the vm and verify if the file with 'hello world ' written saved in /tmp of the vm - fails otherwise
            Maintainer: sandipd@juniper.net

5 - TEST    :  test_ping_within_vn_two_vms_two_different_subnets
-----------------------------------------------------------------------

        Description:  Validate Ping between 2 VMs in the same VN, 2 VMs in different VN
        subnets.
        Test steps:
                1. Create 1 IPAM's.
                2. Create 1 VN with 2 subnets and launch 2 VMs in them.
                3. Ping between the VMs in the same VN should go thru fine.
                4. Ping to the subnet broadcast and all-broadcast address.
        Pass criteria: VM in the same subnet will respond to both the pings, while the VM in a different VN should respond only to the
                        all-broadcast address.
        Maintainer : ganeshahv@juniper.net

6 - TEST    :  test_vm_file_trf_scp_tests
-----------------------------------------------------------------------
None
7 - TEST    :  test_vm_file_trf_tftp_tests
-----------------------------------------------------------------------
None
8 - TEST    :  test_ping_on_broadcast_multicast_with_frag
-----------------------------------------------------------------------

        Description: Validate Ping on subnet broadcast,link local multucast,network broadcastwith packet sizes > MTU and see that fragmentation and assembly work fine .
        Test steps:
                1. Create multiple VMs.
                2. Start a ICMP stream to the subnet-broadcast, multicast and all-broadcast address with a packet-size greater than the MTU.
                3. We should see a packet too big error message.
                4. Increase the MTU on the interface.
        Pass criteria: The Traffic should go thru fine without any loss.
        Maintainer : ganeshahv@juniper.net

9 - TEST    :  test_sctp_traffic_between_vm
-----------------------------------------------------------------------

        Description: Test to validate SCTP flow setup between
        Test steps:
                1. Run SCTP traffic between 2 VM across VN connected through FIP
                2. Verify the Ingress and Egress flow.
        Pass criteria: SCTP egress and ingress flow setup properly.
        Maintainer : chhandak@juniper.net

10 - TEST    :  test_vm_file_trf_scp_tests
-----------------------------------------------------------------------

        Description: Test to validate File Transfer using scp between VMs. Files of different sizes.
        Test steps:
                1. Creating vm's - vm1 and vm2 and a Vn - vn222
                2. Transfer file from vm1 to vm2 with diferrent file sizes using scp
                3. file sizes - 64,1202,2210,10000
                4. verify files present in vm2 match with the size of the file sent.
        Pass criteria: File in vm2 should match with the transferred file size from vm1

        Maintainer : ganeshahv@juniper.net

11 - TEST    :  test_vm_file_trf_tftp_tests
-----------------------------------------------------------------------

        Description:  Test to validate File Transfer using tftp between VMs. Files of different sizes.
        Test steps:
                1. Creating vm's - vm1 and vm2 and a Vn - vn222
                2. Transfer file from vm1 to vm2 with diferrent file sizes using tftp
                3. file sizes - 64,1202,2210,10000
                4. verify files present in vm2 match with the size of the file sent.
        Pass criteria: File in vm2 should match with the transferred file size from vm1
        Maintainer : ganeshahv@juniper.net

12 - TEST    :  test_rp_interface
-----------------------------------------------------------------------

        1. Create a routing policy with interface match.
        2. Launch VMs.
        3. Attach policy to VN and confirm if policy takes hold.

13 - TEST    :  test_rp_interface_static
-----------------------------------------------------------------------

        1. Create a routing policy with interface-static match.
        2. Launch VMs.
        3. Attach policy to VN and confirm if policy takes hold.

14 - TEST    :  test_vdns_ping_same_vn
-----------------------------------------------------------------------

        Test:- Test vdns functionality. On VM launch agent should dynamically update dns records to dns agent
            1.  Create vDNS server
            2.  Create IPAM using above vDNS data
            3.  Create VN using above IPAM and launch 2 VM's within it
            4.  Ping between these 2 VM's using dns name
            5.  Try to delete vDNS server which has IPAM back-reference[Negative case]
            6.  Add CNAME VDNS record for vm1-test and verify we able to ping by alias name
        Pass criteria: Step 4,5 and 6 should pass

        Maintainer: cf-test@juniper.net

15 - TEST    :  test_project_add_delete
-----------------------------------------------------------------------
 Validate that a new project can be added and deleted
            1. Create new tenant using keystone and verify it and default SG
            2. Delete tenant and verify
        Pass criteria: Step 1 and 2 should pass

16 - TEST    :  test_sec_group_basic
-----------------------------------------------------------------------
None
17 - TEST    :  test_sec_group_basic
-----------------------------------------------------------------------
None
18 - TEST    :  test_sec_group_basic
-----------------------------------------------------------------------

        Description: Test basic SG features
            1. Security group create and delete
            2. Create security group with custom rules and then update it for tcp
            3. Launch VM with custom created security group and verify
            4. Remove secuity group association with VM
            5. Add back custom security group to VM and verify
            6. Try to delete security group with association to VM. It should fail.
            7. Test with ping, which should fail
            8. Test with TCP which should pass
            9. Update the rules to allow icmp, ping should pass now.

19 - TEST    :  test_svc_in_network_datapath
-----------------------------------------------------------------------
None
20 - TEST    :  test_svc_in_net_nat_with_static_routes
-----------------------------------------------------------------------
None
21 - TEST    :  test_svc_v2_transparent_datapath
-----------------------------------------------------------------------
None
22 - TEST    :  test_svc_v2_mirroring
-----------------------------------------------------------------------
Validate the service chain mirroring
23 - TEST    :  test_router_crud
-----------------------------------------------------------------------
None
24 - TEST    :  test_basic_snat_behavior
-----------------------------------------------------------------------
Create an external network, a router
        set router-gateway to external network
        launch a private network and attach it to router
        validate ftp and ping to 8.8.8.8 from vm here

25 - TEST    :  test_basic_router_behavior
-----------------------------------------------------------------------
Validate a router is able to route packets between two VNs
        Create a router
        Create 2 VNs, and a VM in each
        Add router port from each VN
        Ping between VMs

26 - TEST    :  test_aap_with_fip
-----------------------------------------------------------------------

        1. Create 2 VSRXs and enable VRRP between them, specifying a vIP.
        2. Update the ports of the respective VMs to allow the vIP so configured.
        3. Associate the same FIP to both the ports using API.
        4. In the Floating IP object, add the vIP as the fixed_ip_address.
        5. Ping to the vIP and FIP should be answered by the AAP active port.
        6. Cause a VRRP Mastership switchover by changing the VRRP priority.
        7. The vIP and FIP should still be accessible via the new VRRP master.


27 - TEST    :  test_aap_with_zero_mac
-----------------------------------------------------------------------

        Verify  VIP reachability over L2 network when AAP MAC is configured with all zeo
            1. Launch 2 vms on same virtual network.
            2. Configure high availability between them with keepalived.
            3. Launch third VM in same VM.
            4. Check the reachability of VIP from 3rd VM.
            5. Shutdown keepalive in master VM to induce VIP  switch over.
            6. Check the reachability of VIP from 3rd VM again.
            7. Bring back master VM which will cause switchover of VIP again.
            8. Check the reachability of VIP from 3rd VM again.

        Pass criteria: Step 4,6 and 8 should pass
        Maintainer: chhandak@juniper.net

28 - TEST    :  test_ports_bindings
-----------------------------------------------------------------------

        Verify that we are able to create a port with custom port bindings
        Steps:
            1) Create Port with Port bindings profile set to {'foo': 'bar'}
            2) Retrieve and verify the same is set

29 - TEST    :  test_ports_specific_subnet_ip
-----------------------------------------------------------------------
Create ports with specific Subnet and IP

        Create two ports in a VN with 2 subnets and specific IPs
        Attach to two VMs
        Ping between them should pass

30 - TEST    :  test_user_def_rt_entry
-----------------------------------------------------------------------

        Description: Validate the entry and deletion of the VN's user-added Route Target in the rt_g
        roup and  bgp.rtarget.0 table on the control nodes
        Test steps:
                  1. Create a VM in a VN.
                  2. Add a route-target entry to the VN.
                  3. Check the rt_group and  bgp.rtarget.0 table on the control nodes.
        Pass criteria: The system-defined, user-defined route target of the VN and the VM IP should
        be seen in the respective tables.
        Maintainer : ganeshahv@juniper.net

31 - TEST    :  test_intf_mirror_src_cn1vn1_dst_cn2vn2_analyzer_cn3vn3
-----------------------------------------------------------------------
Validate the interface mirroring
        src vm, dst vm and analyzer vm on different CNs, all in different VNs

32 - TEST    :  test_intf_mirror_with_subintf_src_cn1vn1_dst_cn2vn2_analyzer_cn3vn3
-----------------------------------------------------------------------
Validate the interface mirroring
        src vm, dst vm and analyzer vm on different CNs, all in different VNs
        when src vmi, dst vmi and analyzer vmi are sub interfaces

33 - TEST    :  test_intf_mirroring_disable_enable_scenarios
-----------------------------------------------------------------------
Validate the interface mirroring
        Validate enable/disable combinations on parent/sub interface
        1) Check pkts get mirrored from both sub intf and parent intf when enabled on both
        2) Disable on sub intf and check pkts from parent still get mirrored
        3) Enable on sub intf and verify step 1
        4) Disable on parent and check pkts from sub intf still get mirrored
        5) Enable on parent and verify step 1

34 - TEST    :  test_juniper_header
-----------------------------------------------------------------------
Validate the presence of juniper header
        1) Check pkts get mirrored from both sub intf and parent intf when enabled on both
        2) Verify if the juniper header is correct
        3) Verify if the inner header is correct

35 - TEST    :  test_svc_creation_with_heat
-----------------------------------------------------------------------

        Validate creation of a in-network-nat service chain using heat

36 - TEST    :  test_svc_creation_with_heat
-----------------------------------------------------------------------
None
37 - TEST    :  test_public_access_thru_svc_w_fip
-----------------------------------------------------------------------

            Validate creation of a in-network-nat service chain using heat.
            Create a end VN.
            Associate FIPs to the end VM and the right intf of the SVM.
            Create a static route entry to point 0/0 to the left intf of the SVM.
            The end VM should be able to access internet.

38 - TEST    :  test_transit_vn_sym_1_innet
-----------------------------------------------------------------------
None
39 - TEST    :  test_public_access_thru_svc_w_fip
-----------------------------------------------------------------------

            Validate creation of a in-network-nat service chain using heat.
            Create a end VN.
            Associate FIPs to the end VM and the right intf of the SVM.
            Create a static route entry to point 0/0 to the left intf of the SVM.
            The end VM should be able to access internet.

40 - TEST    :  test_basic_policy_allow_deny
-----------------------------------------------------------------------

        Create 2 Vns and allow icmp traffic between them and validate with pings
        Update the policy to deny the same traffic
        Check that pings fail

41 - TEST    :  test_policy
-----------------------------------------------------------------------
None
42 - TEST    :  test_policy_to_deny
-----------------------------------------------------------------------
None
43 - TEST    :  test_policy_modify_vn_policy
-----------------------------------------------------------------------
None
44 - TEST    :  test_remove_policy_with_ref
-----------------------------------------------------------------------
None
45 - TEST    :  test_policy_cidr_src_cidr_dst_any
-----------------------------------------------------------------------
Test cases to test policy CIDR
46 - TEST    :  test_policy_inheritance_src_vn_dst_pol
-----------------------------------------------------------------------
Test cases to test policy inheritance
47 - TEST    :  test_policy_cidr_src_vn_dst_cidr
-----------------------------------------------------------------------
None
48 - TEST    :  test_policy_inheritance_src_pol_dst_any
-----------------------------------------------------------------------
None
49 - TEST    :  test_basic_policy_allow_deny
-----------------------------------------------------------------------

        Create 2 Vns and allow icmp traffic between them and validate with pings
        Update the policy to deny the same traffic
        Check that pings fail

50 - TEST    :  test_repeated_policy_modify
-----------------------------------------------------------------------
None
51 - TEST    :  test_multi_vn_repeated_policy_update_with_ping
-----------------------------------------------------------------------
 Call repeated_policy_update_test_with_ping with multi VN scenario.

52 - TEST    :  test_multi_vn_repeated_policy_update_with_ping
-----------------------------------------------------------------------
 Call repeated_policy_update_test_with_ping with multi VN scenario.

53 - TEST    :  test_ecmp_hash_src_ip
-----------------------------------------------------------------------

            Validates ecmp hash when only source ip is configured
            Maintainer : cmallam@juniper.net

54 - TEST    :  test_ecmp_svc_v2_in_network_nat_with_3_instance
-----------------------------------------------------------------------

         Description: Validate ECMP with v2 service chaining in-network-nat mode datapath having service instance
         Test steps:
           1.   Creating vm's - vm1 and vm2 in networks vn1 and vn2.
           2.   Creating a service instance in in-network-nat mode with 3 instances and
                left-interface of the service instances sharing the IP and enabled for static route.

           3.   Creating a service chain by applying the service instance as a service in a policy between the VNs.
           4.   Checking for ping and tcp traffic between vm1 and vm2.
         Pass criteria: Ping between the VMs should be successful and TCP traffic should reach vm2 from vm1.
         Maintainer : ganeshahv@juniper.net

55 - TEST    :  test_ecmp_svc_in_network_with_static_route_no_policy
-----------------------------------------------------------------------

        Description:    Validate service chaining in-network mode datapath having a static route entries of the either virtual networks pointing to the corresponding interfaces of the
        service instance. We will not configure any policy.
        Test steps:
            1.  Creating vm's - vm1 and vm2 in networks vn1 and vn2.
            2.  Creating a service instance in in-network mode with 1 instance and left-interface of the service instance sharing the IP and both the left and the right interfaces enabled for static route.
            3.  Delete the policy.
            4.  Checking for ping and tcp traffic between vm1 and vm2.
        Pass criteria: Ping between the VMs should be successful and TCP traffic should reach vm2 from vm1.

        Maintainer : ganeshahv@juniper.net

56 - TEST    :  test_ecmp_svc_v2_transparent_with_3_instance
-----------------------------------------------------------------------

           Description: Validate ECMP with version 2 service chaining transparent mode datapath having service instance
           Test steps:
                1.Creating vm's - vm1 and vm2 in networks vn1 and vn2.
                2.Creating a service instance in transparent mode with 3 instances.
                3.Creating a service chain by applying the service instance as a service in a policy between the VNs.
                4.Checking for ping and bidirectional tcp traffic between vm1 and vm2.
           Pass criteria: Ping between the VMs should be successful and TCP traffic should reach vm2 from vm1 and vice-versa.
           Maintainer : ganeshahv@juniper.net

57 - TEST    :  test_ecmp_svc_in_network_with_3_instance
-----------------------------------------------------------------------
None
58 - TEST    :  test_ecmp_with_svm_deletion
-----------------------------------------------------------------------

           Description: Validate ECMP with service chaining transparent mode datapath by removing SVMs
           Test steps:
                1.Creating vm's - vm1 and vm2 in networks vn1 and vn2.
                2.Creating a service instance in transparent mode with 3 instances.
                3.Creating a service chain by applying the service instance as a service in a policy between the VNs.
                4.Delete the SVMs in the SI one by one.
                5.There should be no traffic loss.
           Pass criteria: Ping between the VMs should be successful and TCP traffic should reach vm2 from vm1 and vice-versa.
           Maintainer : ganeshahv@juniper.net

59 - TEST    :  test_svc_fate_sharing_basic
-----------------------------------------------------------------------

        Description: Basic test to validate fate sharing in a multi inline service chain with 2 SIs, 1 SVM each.
        Test steps:
                         1.Creating vm's - vm1 and vm2 in networks vn1 and vn2.
                         2.Creating 2 inline service instances SI1 and SI2.
                         3.Creating a service chain by applying the 2 service instances in a policy between t
                    he VNs.
                         4.Associate an HC instance with right intf of one of the SVMs
                         5.Bring down the intf in the step 4
                         6.Verify that all the re-origined routes(ServiceChain) are deleted from all the RIs of all the SIs
                         7.Verify the step 6 in both control node and agent
                         8.Bring up the intf in the step 5
                         8.Verify that the routes should be re-originated again, and the traffic also starts flowing

        Pass criteria: Ping/Route deletion/Route addition should be successful.
        Maintainer : ankitja@juniper.net

60 - TEST    :  test_three_stage_v2_SC
-----------------------------------------------------------------------

        Description: Validate multi-Inline SVC version 2.
        Test steps:
                         1.Creating vm's - vm1 and vm2 in networks vn1 and vn2.
                         2.Creating 3 service instances.
                         3.Creating a service chain by applying the 3 service instances in a policy between t
                    he VNs.
                         4.There should be no traffic loss.
        Pass criteria: Ping between the VMs should be successful.
        Maintainer : ganeshahv@juniper.net

61 - TEST    :  test_svc_fate_sharing_basic
-----------------------------------------------------------------------
None
62 - TEST    :  test_floating_ip
-----------------------------------------------------------------------
Test to validate floating-ip Assignment to a VM. It creates a VM, assigns a FIP to it and pings to a IP in the FIP VN.

63 - TEST    :  test_mx_gateway
-----------------------------------------------------------------------

         Test to validate floating-ip from a public pool  assignment to a VM. It creates a VM, assigns a FIP to it and pings to outside the cluster.
             1.Check env variable MX_GW_TEST is set to 1. This confirm the MX present in Setup.
             2.Create 2 Vns. One public100 and other vn200. VN public100 created with IP pool accessible from outside network.
             3.VM vm200 launched under vn200.
             4.VM vm200 get floating ip from public100 network
             5.Configure the control with MX peering if not present.
             6.Try to ping outside network and check connecivity

         Pass criteria:  Step 6 should pass
         Maintainer: chhandak@juniper.net

64 - TEST    :  test_lbaas_client_pool_in_same_net
-----------------------------------------------------------------------
Create Lbaas pool, member and vip
           Member, VIP and client all in same VN
           verify: pool, member and vip gets created
           create HMON and verify the association
           verify the HTTP traffic getting loadbalanced using the standby netns

65 - TEST    :  test_lbaas_with_different_fip
-----------------------------------------------------------------------
Create LB, LISTENER, POOL and MEMBER
            create FIP and associate it to VIP, create a VM in the FIP network
           verify: pool, member and vip gets created
           after vip creation nets ns is created in compute node and haproxy
           process starts , fail otherwise
           Verify different LB Method

66 - TEST    :  test_lbaas_with_sg_vip
-----------------------------------------------------------------------
Create LB, LISTENER, POOL and MEMBER
            create FIP and associate it to VIP, create a VM in the FIP network
           verify: pool, member and vip gets created
           after vip creation nets ns is created in compute node and haproxy
           process starts , fail otherwise
           Verify different LB Method

67 - TEST    :  test_bgpaas_basic
-----------------------------------------------------------------------

        1. Create a BGPaaS object with shared attribute, IP address and ASN.
        2. Launch vSRXs which will act as the clients.
        3. Run VRRP among them.
        4. The VRRP master will claim the BGP Source Address of the BGPaaS object.

68 - TEST    :  test_vlan_interface_2
-----------------------------------------------------------------------

        Test ping/hping between tagged-untagged vmis across VNs

69 - TEST    :  test_fat_flow_intra_vn_inter_node
-----------------------------------------------------------------------
None
70 - TEST    :  test_ecmp_with_static_routes
-----------------------------------------------------------------------
None
71 - TEST    :  test_rt_table_scenario_1
-----------------------------------------------------------------------

        In a VN, launch a VM each on two computes
        Add a shorter prefix intf static route to VM2
        Delete the VMs.
        The route table on compute1 should be removed


72 - TEST    :  test_svc_hc_basic
-----------------------------------------------------------------------
None
73 - TEST    :  test_svc_trans_segment_right_hc_fail_svm
-----------------------------------------------------------------------
None
74 - TEST    :  test_contrail_status
-----------------------------------------------------------------------
 Test to verify that all services are running and active


75 - TEST    :  test_db_nodemgr_status
-----------------------------------------------------------------------
 Test to verify db nodemgr status


76 - TEST    :  test_verify_generator_collector_connections
-----------------------------------------------------------------------

         Description: Verify generator:module connections to collector

              1.Verify all generators connected to collector - fails otherwise
              2.Get the xmpp peers in vrouter uve and get the active xmpp peer out of it
              3.Verify from agent introspect that active xmpp matches with step 2 - fails otherwise
              4.Get bgp peers from bgp-peer uve and verify from control node introspect that that matches - fails otherwise

         Maintainer: sandipd@juniper.net

77 - TEST    :  test_verify_generator_connections_to_collector_node
-----------------------------------------------------------------------
 Test to validate generator connections


78 - TEST    :  test_verify_process_status_agent
-----------------------------------------------------------------------
 Test to validate process_status


79 - TEST    :  test_verify_process_status_analytics_node
-----------------------------------------------------------------------
 Test to validate process_status-Analytics-Node


80 - TEST    :  test_verify_process_status_config
-----------------------------------------------------------------------
 Test to validate process_status-Config


81 - TEST    :  test_verify_process_status_control_node
-----------------------------------------------------------------------
 Test to validate process_status-Control-Node


82 - TEST    :  test_verify_object_logs
-----------------------------------------------------------------------

          Description: Test to validate object logs
              1.Create vn/vm and verify object log tables updated with
                those vn, vm and routing-instance - fails otherwise
          Maintainer: sandipd@juniper.net

83 - TEST    :  test_interface_static_table
-----------------------------------------------------------------------

        Description: Validate interface static table
        Test steps:
                    1.  Creating vm's - vm1 and vm2 and middle vm in networks vn1 and vn2.
                    2.  Creating interface static table betn left and right vm
                    3.  Apply static table to the middle ports.
                    4.  Checking for ping and tcp traffic between vm1 and vm2.
        Pass criteria: Ping between the VMs should be successful and route should be in the agent

84 - TEST    :  test_network_route_table
-----------------------------------------------------------------------

        Description: Validate network static table
        Test steps:
                    1.  Creating vm's - vm1 and vm2 and middle vm in networks vn1 and vn2.
                    2.  Creating network static table betn left and right vm
                    3.  Apply static table to the middle ports.
                    4.  Checking for ping and tcp traffic between vm1 and vm2.
        Pass criteria: Ping between the VMs should be successful and route should be in the agent

85 - TEST    :  test_qos_remark_dscp_on_vmi
-----------------------------------------------------------------------
 Create a qos config for remarking DSCP 1 to 10
            Have VMs A, B
            Apply the qos config to VM A
            Validate that packets from A to B have DSCP marked correctly

86 - TEST    :  test_dsnat_tcp_basic
-----------------------------------------------------------------------

            Configure TCP port translation pool
            send TCP traffic from the VM to the fabric IP
            Verify the Port address translation happened and the
               port being used in the range of configured

87 - TEST    :  test_control_node_switchover
-----------------------------------------------------------------------
 Stop the control node and check peering with agent fallback to other control node.
            1. Pick one VN from respource pool which has 2 VM's in it
            2. Verify ping between VM's
            3. Find active control node in cluster by agent inspect
            4. Stop control service on active control node
            5. Verify agents are connected to new active control-node using xmpp connections
            6. Bring back control service on previous active node
            7. Verify ping between VM's again after bringing up control serveice
        Pass criteria: Step 2,5 and 7 should pass

88 - TEST    :  test_process_restart_in_policy_between_vns
-----------------------------------------------------------------------
 Test to validate that with policy having rule to check icmp fwding between VMs on different VNs , ping between VMs should pass
        with process restarts
            1. Pick 2 VN's from resource pool which has one VM each
            2. Create policy with icmp allow rule between those VN's and bind it networks
            3. Ping from one VM to another VM
            4. Restart process 'vrouter' and 'control' on setup
            5. Ping again between VM's after process restart
        Pass criteria: Step 2,3,4 and 5 should pass

89 - TEST    :  test_underlay_broadcast_traffic_handling
-----------------------------------------------------------------------
 Test the underlay brocast traffic handling by vrouter. (Bug-1545229).
            1. Send broadcast traffic from one compute node.
            2. Other compute in same subnet should receive that traffic.
            3. Receiving compute should treat this traffic as underlay.
            4. Compute should not replicate the packet and send the copy back.
        Pass criteria: Step 3-4 should pass
        Maintainer : chhandak@juniper.net

90 - TEST    :  test_basic_dm
-----------------------------------------------------------------------

        Description: Verify basic config is pushed to mx

91 - TEST    :  test_apply_policy_fip_on_same_vn_gw_mx
-----------------------------------------------------------------------
A particular VN is configure with policy to talk accross VN's and FIP to access outside
92 - TEST    :  test_precedence_xmpp_auth
-----------------------------------------------------------------------

        Precedence in XMPP auth is that server auth takes precedence over agent auth. To check this,
        undo xmpp auth on server side and check if XMPP is up and it shows no "TLS" string in introspect.

93 - TEST    :  test_undo_xmpp_auth
-----------------------------------------------------------------------

        Check if undoing setting and deleting xmpp auth creates any issues.
        Also confirm if introspect reflects the changes as and when they are done

94 - TEST    :  test_perms2_global_share
-----------------------------------------------------------------------

        Test perms2 global shared property of an object
        steps:
            1. Add user1 as role1 in project1 and project2
            2. Add *.* role1:CRUD to domain acl
            3. Create a Shared virtual-network in project1
            4. Verify global shared flag is set on VN's perms2
            4. Using shared VN try to launch a VM in project2

95 - TEST    :  test_perms2_owner
-----------------------------------------------------------------------

        Validate perms2 tenant ownership
        steps:
            1. Create Project1 and Project2
            2. Add user1 as role1 under project1 and project2
            3. create domain acl rule 'VirtualNetwork.* role1:CRUD'
            4. create VN1 under Project1
            4. create VN2 under Project2
            5. user1 shouldnt be able to read VN1 using project2 creds
            6. admin should be able to read VN1 though he isnt member of the project
            7. Network list with respective project creds should list corresponding VNs
            8. Change ownership of VN1 to Project2
            9. user1 should now be able to read VN1 using Project2 creds
            10. Network list with Project2 creds should list both VNs,
                Project1 creds should list VN1 alone, admin should list both VNs

96 - TEST    :  test_rbac_acl_different_roles
-----------------------------------------------------------------------

        Validate via vnc_apis CRUD of rbac acl and objects
        steps:
           1. Add user1 as role1 and user2 as role2 to the project
           2. Both user1 and user2 shouldnt be able to create VNs/STs
           3. Create Rbac ACL under project with VN.* role1:CRUD rule
           4. user1 should be able to create VN, but not Service-Template
           5. Create Rbac ACL under domain with ST.* role1:CRUD rule
           6. user1 should be able to create Service-Template
           7. user2 shouldnt be able to read the created VN/ST or create new
           8. Update the acl rule with Read perms for role2
           9. user2 should be able to read created VN but not create new VNs
           10. user2 should be able to read created ST but not create new STs
           11. Delete the acl rule with Read perms for role2
           12. user2 shouldnt be able to read the created ST/VN or create new VN/ST
           13. Update global acl with role2:R for both VN and ST
           14. user2 should be able to read VN and ST
           13. Delete both project and domain acls
           14. user1 shouldnt be able to read/delete VN/ST
           15. Update global acl with role1:CRUD for both VN/ST
           16. user1 should now be able to delete both VN and ST
           17. Delete global acl
        pass : acl creation and update should complete scucessfully.

97 - TEST    :  test_rbac_create_delete_vm
-----------------------------------------------------------------------

        Validate creds passed via orchestrator(nova/neutron)
        steps:
           1. Add user1 as role1
           2. Create Rbac ACL under project with role1:CRUD perms for
                a. VN.*
                b. VM.*
                c. VMI.*
                d. IIP.*
                e. SG.*
                f. LR.*
                g. FIP-Pool.*
                h. ACL.*
           3. user1 should be able to create VN and VM via orchestrator
           4. Validate the VN and VM
        pass: user should be able to create and delete VN and VM

98 - TEST    :  test_mac_learning_single_isid
-----------------------------------------------------------------------

            Test MAC learning on I-Component with single isid

99 - TEST    :  test_global_scope
-----------------------------------------------------------------------

        Validate global scope APS, FwP, FwR, ServiceGroup, AG, Tag
        Steps:
            1. Associate global scope tag respectively,
               a. App tags to VNs
               b. Tier tags to VMs
               c. Site and deployment tags to Project
            2. Create AG and associate a scoped label
            3. Create SG for icmp
            4. Create SG for tcp ports 8000-8010
            5. Associate AG Label to ENG vms
            6. Create FWR with ICMP SG with site EP
            7. Create FWR bw web-Tier and AG-Label for tcp SG
            8. Create FWR bw AG-Label and DB-Tier for udp ports 8000-8010
            9. Create FwPolicy and attach all the rules
            10. Create APS with FwPolicy associated
            11. Validate the FWRules with traffic

100 - TEST    :  test_mixed_draft_mode
-----------------------------------------------------------------------
None
101 - TEST    :  test_change_of_rt_in_vn
-----------------------------------------------------------------------

         Verify the impact of change in route target of a vn
         Test Steps:
           1.Test configuration is simillar with (test_mx_gateway)
           2.In this test, first configure the public100 VN with wrong route target value (Mismatch with MX)
           3.Check the communication outside virtual network cluster fails
           4.Modify the route target value(Matching with MX)
           5.Communication should pass
         Pass criteria:  Step 3 and 5 should pass.
         Maintainer: chhandak@juniper.net

102 - TEST    :  test_flow_action_drop_stats
-----------------------------------------------------------------------

        Description: Verify flow action drop stats
        Steps:
            1. Create 2 VNs and launch 1 VM in each VN, on different nodes on multi node setup
            2. Add policy to deny pkts between VNs.
            3. Ping VM2 from VM1
        Pass criteria:
            1. Verify flow action count gets incremented, get it from introspect
            2. Verify flow action count gets incremented for the vmi of VM1, get it from introspect


103 - TEST    :  test_with_vxlan_encap_agent_restart
-----------------------------------------------------------------------

         Description:Test agent restart with VXLAN Encap
             1. Configure VXLAN as highest priority
             2. Configure 2 VM under a VN configured with l2-l3 mode
             3. Send L2 traffic and verify communication between vms
             4. Restart the contrail-grouter service.
             5. Send L2 Traffic and verify communication between vms
         Pass criteria:  Step 3 and 5 should pass
         Maintainer: chhandak@juniper.net

104 - TEST    :  test_with_vxlan_encap_dns_disabled_for_l2_vn
-----------------------------------------------------------------------
 1. Launch a virtual network with dhcp_enable=False and DNS disabled
            2. Launch 3 vm with management interface and other with above vm.
            3. Run dhcp server on eth1 in one vm dns server on eth1 in other vm
            4. From the test_vm query for dns using dig and nslookup
            Maintainer: hkumar@juniper.net

105 - TEST    :  test_with_vxlan_encap_to_verify_l2_vm_file_trf_by_scp
-----------------------------------------------------------------------
Test to verify scp of a file with vxlan encap
           Maintainer: hkumar@juniper.net

106 - TEST    :  test_with_vxlan_encap_to_verify_l2_vm_file_trf_by_tftp
-----------------------------------------------------------------------
Test to verify tftp of a file with vxlan encap
           Maintainer: hkumar@juniper.net

107 - TEST    :  test_gw_less_fwd_single_vn_ip_fab
-----------------------------------------------------------------------

            Test Gateway less forwarding with single VN and IP Fabric provider
            network. IP Fbaric network is configured as provider network
            over vn1. Multiple VMs will be launched across compute nodes
            and ping between VMs should be successful and happen through
            underlay. Ping between vhosts to VMs should be successful and happen
            through underlay. Also, ping between VMs to vhosts also should be
            successful and should go through underlay.

108 - TEST    :  test_run_contrail_flows_cli_cmds
-----------------------------------------------------------------------
1. Test to verify  contrail-flows cli cmd with various optional arguments is not broken..
              Run the following commands:
              cmd1: contrail-flows --source-vn default-domain:ctest-AnalyticsTestSanityWithResource-70247115:ctest-vn1-92886157
                    --source-ip 107.191.91.3 --source-port 1453 --protocol 1 --direction ingress --tunnel-info
                    --start-time now-30m --end-time now'
              cmd2: contrail-flows --destination-vn default-domain:ctest-AnalyticsTestSanityWithResource-70247115:ctest-vn1-92886157
                    --destination-ip 107.191.91.4 --destination-port 0 --action pass --protocol 1 --verbose --last 1h
              cmd3: contrail-flows --vrouter-ip 'vrouter-ip' --other-vrouter-ip 'peer-vrouter-ip' --start-time now-10m --end-time now
              cmd4: contrail-flows --vrouter 'vrouter-name' --last 10m'
              cmd5: contrail-flows --vmi 'vmi fq_name'
           2.Verify the command runs properly
           3.Verify the cmd is returning non null output

109 - TEST    :  test_run_contrail_logs_cli_cmd_with_multiple_different_optional_args
-----------------------------------------------------------------------
1.Test to verify contrail-logs cli cmd with multiple different optional type args is not broken
           2.Verify the command runs properly and its returning some output
           3.Do not verify the correctness of the output

110 - TEST    :  test_run_contrail_stats_cli_cmds
-----------------------------------------------------------------------
1.Run contrail-stats commands with various options
           2.Verify the command runs properly and its returning some output
           3.Do not verify the correctness of the output

111 - TEST    :  test_verify_session_record_table_inter_vn
-----------------------------------------------------------------------
Verify session record table ,generated stats between different vns
        1.query and verify number of client session records
        2.query and verify number of server session records
        3.query with local_ip server_port protocol
        4.query with server_port local_ip filter by server_port
        5.query with client_port remote_ip filter by client_port
          Total we get three record limit by 2
        6.query with sort_fields

112 - TEST    :  test_verify_session_sampling_teardown
-----------------------------------------------------------------------

        1.query client session samples
        2.query server session samples
        3.query client session to get number of sessions exported
        4.query session record table for teardown bytes/pkts
        5.query sample count after teardown on server side

113 - TEST    :  test_verify_session_series_table_inter_vn
-----------------------------------------------------------------------
Verify session series table ,generated stats between different vns
        1.query client session samples
        2.query for server ports
        3.sort results by server_port column
        4.verify granularity with T=10
        5.verify sampled bytes
        6.verify logged bytes
        7.query and verify filter by action



